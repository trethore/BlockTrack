# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

"""Authentication token payload"""
type AuthPayload {
  accessToken: String!
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar BigInt

input CreateUserInput {
  email: String!
  password: String!
  username: String!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input FavoriteTokenInput {
  tokenId: ID!
}

input GetTokenInput {
  id: ID
  symbol: String
}

input LoginInput {
  emailOrUsername: String!
  password: String!
}

type Mutation {
  """Adds a token to the authenticated user's favorites"""
  addFavoriteToken(input: FavoriteTokenInput!): TokenEntity!

  """Creates a new user account"""
  createUser(createUserData: CreateUserInput!): UserEntity!

  """Deletes the authenticated user profile"""
  deleteUser(id: ID!): ID!

  """Logs in a user and returns a JWT"""
  login(loginData: LoginInput!): AuthPayload!

  """Removes a token from the authenticated user's favorites"""
  removeFavoriteToken(input: FavoriteTokenInput!): TokenEntity!

  """Updates the authenticated user profile"""
  updateUser(updateUserData: UpdateUserInput!): UserEntity!
}

type Query {
  """Gets the currently authenticated user"""
  me: UserEntity!

  """Returns the authenticated user's favorite tokens"""
  myFavoriteTokens: [TokenEntity!]!

  """Returns a single token by ID or symbol"""
  token(input: GetTokenInput!): TokenEntity

  """Returns all tokens ordered by rank (ascending)"""
  tokens: [TokenEntity!]!
}

"""Represents a cryptocurrency token"""
type TokenEntity {
  circulatingSupply: BigInt
  id: ID!
  lastDataPointsUpdate: DateTime
  lastUpdated: DateTime
  marketCapChange24h: Float
  marketCapUsd: Float
  maxSupply: BigInt
  name: String!
  percentChange1h: Float
  percentChange1y: Float
  percentChange7d: Float
  percentChange24h: Float
  percentChange30d: Float
  priceUSD: Float!
  rank: Int!
  symbol: String!
  totalSupply: BigInt
  volume24hUsd: Float
}

input UpdateUserInput {
  email: String
  id: ID!
  password: String
  username: String
}

"""Represents a user account"""
type UserEntity {
  createdAt: DateTime!
  email: String!
  id: ID!
  updatedAt: DateTime!
  username: String!
}